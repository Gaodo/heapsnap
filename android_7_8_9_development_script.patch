diff --git a/scripts/native_heapdump_viewer.py b/scripts/native_heapdump_viewer.py
index 0689a1d..b2dbf6d 100755
--- a/scripts/native_heapdump_viewer.py
+++ b/scripts/native_heapdump_viewer.py
@@ -86,9 +86,10 @@ native_heap = args[0]
 re_map = re.compile("(?P<start>[0-9a-f]+)-(?P<end>[0-9a-f]+) .... (?P<offset>[0-9a-f]+) [0-9a-f]+:[0-9a-f]+ [0-9]+ +(?P<name>.*)")
 
 class Backtrace:
-    def __init__(self, is_zygote, size, frames):
+    def __init__(self, is_zygote, size, num_allocs, frames):
         self.is_zygote = is_zygote
         self.size = size
+        self.num_allocs = num_allocs
         self.frames = frames
 
 class Mapping:
@@ -113,10 +114,11 @@ for line in open(native_heap, "r"):
     if len(parts) > 7 and parts[0] == "z" and parts[2] == "sz":
         is_zygote = parts[1] != "1"
         size = int(parts[3])
+        num_allocs = int(parts[5])
         frames = map(lambda x: int(x, 16), parts[7:])
         if reverse_frames:
             frames = list(reversed(frames))
-        backtraces.append(Backtrace(is_zygote, size, frames))
+        backtraces.append(Backtrace(is_zygote, size, num_allocs, frames))
         continue
 
     m = re_map.match(line)
@@ -209,16 +211,17 @@ class AddrInfo:
         self.addr = addr
         self.size = 0
         self.number = 0
+        self.num_allocs = 0
         self.children = {}
 
-    def addStack(self, size, stack):
-        self.size += size
-        self.number += 1
+    def addStack(self, size, num_allocs, stack):
+        self.size += size * num_allocs
+        self.number += num_allocs
         if len(stack) > 0:
             child = stack[0]
             if not (child.addr in self.children):
                 self.children[child.addr] = child
-            self.children[child.addr].addStack(size, stack[1:])
+            self.children[child.addr].addStack(size, num_allocs, stack[1:])
 
 zygote = AddrInfo("ZYGOTE")
 app = AddrInfo("APP")
@@ -272,7 +275,7 @@ for backtrace in backtraces:
         stack.append(AddrInfo("%x" % addr))
     stack.reverse()
     if backtrace.is_zygote:
-        zygote.addStack(backtrace.size, stack)
+        zygote.addStack(backtrace.size, backtrace.num_allocs, stack)
     else:
         app.addStack(backtrace.size, stack)
 
